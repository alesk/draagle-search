<?xml version="1.0" encoding="UTF-8"?>
<types>

  <!-- text_suggest : Matches whole terms in the suggest text  -->
  <fieldType name="text_suggest" class="solr.TextField" positionIncrementGap="100">
    <analyzer type="index">
      <charFilter class="solr.MappingCharFilterFactory" mapping="${solr.solr.home}/common/mapping-ISOLatin1Accent.txt"/>
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.WordDelimiterFilterFactory" 
        generateWordParts="1" 
        generateNumberParts="1"
        catenateWords="1"
        catenateNumbers="1"
        catenateAll="1"
        splitOnCaseChange="1"
        splitOnNumerics="1"
        preserveOriginal="1"
        />
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement=" " replace="all"/>
    </analyzer>
    <analyzer type="query">
      <charFilter class="solr.MappingCharFilterFactory" mapping="${solr.solr.home}/common/mapping-ISOLatin1Accent.txt"/>
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.WordDelimiterFilterFactory" 
        generateWordParts="0" 
        generateNumberParts="0"
        catenateWords="0"
        catenateNumbers="0"
        catenateAll="0"
        splitOnCaseChange="0"
        splitOnNumerics="0"
        />
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement=" " replace="all"/>
    </analyzer>
  </fieldType>

  <!-- text_phonetic_do : Matches a phonetic version of the suggest text, for a fuzzy effect 
         Note that there are other phonetic algorithms as well, but this works pretty well
    -->
    <fieldType name="text_phonetic_do" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldType>

    <!-- autocomplete_edge : Will match from the left of the field, e.g. if the document field
         is "A brown fox" and the query is "A bro", it will match, but not "brown"
    -->
    <fieldType name="autocomplete_edge" class="solr.TextField">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="${solr.solr.home}/common/mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([\.,;:-_])" replacement=" " replace="all"/>
        <filter class="solr.EdgeNGramFilterFactory" maxGramSize="30" minGramSize="1"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="${solr.solr.home}/common/mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([\.,;:-_])" replacement=" " replace="all"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="^(.{30})(.*)?" replacement="$1" replace="all"/>
      </analyzer>
    </fieldType>

    <!-- autocomplete_ngram : Matches any word in the input field, with implicit right truncation.
         This means that the field "A brown fox" will be matched by query "bro".
         We use this to get partial matches, but these whould be boosted lower than exact and left-anchored
    -->
    <fieldType name="autocomplete_ngram" class="solr.TextField">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="${solr.solr.home}/common/mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EdgeNGramFilterFactory" maxGramSize="20" minGramSize="1"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="${solr.solr.home}/common/mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="([^\w\d\*æøåÆØÅ ])" replacement="" replace="all"/>
        <filter class="solr.PatternReplaceFilterFactory" pattern="^(.{20})(.*)?" replacement="$1" replace="all"/>
      </analyzer>
    </fieldType>

    <!-- Define all the basic field types for consistency -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
    <fieldtype name="binary" class="solr.BinaryField"/>
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>


<!-- A text field with defaults appropriate for Slovene: it
         tokenizes with StandardTokenizer, removes Slovene stop words
         (stopwords_sl.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <fieldType name="text_sl" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.PatternReplaceFilterFactory"
          pattern="(\{\{[^\}]*\}\})" replacement="" replace="all"
          />
        <filter class="solr.StopFilterFactory"
          ignoreCase="true"
          words="${solr.solr.home}/common/stopwords_sl.txt"
          enablePositionIncrements="true"
          />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="${solr.solr.home}/common/protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
    -->
        <filter class="solr.SynonymFilterFactory" synonyms="${solr.solr.home}/common/synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.HunspellStemFilterFactory"
          dictionary="${solr.solr.home}/common/sl_SI.utf8.dic"
          affix="${solr.solr.home}/common/sl_SI.utf8.aff"
          ignoreCase="true" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!--<filter class="solr.SynonymFilterFactory" synonyms="${solr.solr.home}/common/synonyms.txt" ignoreCase="true" expand="true"/>-->
        <filter class="solr.StopFilterFactory"
          ignoreCase="true"
          words="${solr.solr.home}/common/stopwords_sl.txt"
          enablePositionIncrements="true"
          />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.HunspellStemFilterFactory"
          dictionary="${solr.solr.home}/common/sl_SI.utf8.dic"
          affix="${solr.solr.home}/common/sl_SI.utf8.aff"
          ignoreCase="true" />
      </analyzer>
    </fieldType>

<!-- base on text_sl with term vectors included -->
    <fieldType name="text_sl_term" class="solr.TextField" positionIncrementGap="100" termVectors="true" termPositions="true" termOffsets="ture">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.PatternReplaceFilterFactory"
          pattern="(\{\{[^\}]*\}\})" replacement="" replace="all"
          />
        <filter class="solr.StopFilterFactory"
          ignoreCase="true"
          words="${solr.solr.home}/common/stopwords_sl.txt"
          enablePositionIncrements="true"
          />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="${solr.solr.home}/common/protwords.txt"/>
        <filter class="solr.SynonymFilterFactory" synonyms="${solr.solr.home}/common/synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.HunspellStemFilterFactory"
          dictionary="${solr.solr.home}/common/sl_SI.utf8.dic"
          affix="${solr.solr.home}/common/sl_SI.utf8.aff"
          ignoreCase="true" />
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory"
          ignoreCase="true"
          words="${solr.solr.home}/common/stopwords_sl.txt"
          enablePositionIncrements="true"
          />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.HunspellStemFilterFactory"
          dictionary="${solr.solr.home}/common/sl_SI.utf8.dic"
          affix="${solr.solr.home}/common/sl_SI.utf8.aff"
          ignoreCase="true" />
      </analyzer>
    </fieldType>

    <fieldType name="text_spell" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="${solr.solr.home}/common/stopwords_sl.txt"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="${solr.solr.home}/common/synonyms.txt" ignoreCase="true" expand="true"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="${solr.solr.home}/common/stopwords_sl.txt"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory" />
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>
  </types>
